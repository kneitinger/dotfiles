#!/usr/bin/env bash

# Older ThinkPads have Menu between Alt_R and Control_R, newer ones PrintScreen
RIGHT_BRACKET_EXPR="Print=bracketright"
if [ $# = 1 ] && [ "$1" = "--menu-bracket" ]; then
  RIGHT_BRACKET_EXPR="Menu=bracketright"
fi

# If xcape is already running, kill it
pgrep xcape > /dev/null && killall xcape

# Initialize array that holds the xcape mapping expressions
xcape_exprs=()

# Map CapsLock->ctrl, ctrl-tap->Esc
setxkbmap -option ctrl:nocaps
xcape_exprs+=( "Control_L=Escape" )

# Ergonomic tap vs. hold keybindings
xcape_exprs+=( "Shift_L=parenleft" )
xcape_exprs+=( "Shift_R=parenright" )
xcape_exprs+=( "Alt_L=Shift_L|bracketleft" )
xcape_exprs+=( "Alt_R=Shift_R|bracketright" )
xcape_exprs+=( "Super_L=bracketleft" )
xcape_exprs+=( "$RIGHT_BRACKET_EXPR" )

# Map a spacebar hold to act as the i3 modifier (Mod3)
#
# 1. Set space's former keycode to map to $spare_mod
# 2. Remove $spare_mod from default mapping (note: mod4 is specific to Hyper_L)
# 3. Set mod3 (which is unused by default) to map to $spare_mod
# 4. Map space to an unused keycode so that it can be later used
# 5. Create xcape mapping of Hyper_L (now spacebar) tap -> space
# See: https://github.com/alols/xcape#examples
# Todo: Create a way to nicely toggle this, as some games or applications
#       require spacebar holding. One clean way to do this could perhaps be to
#       to map Super to Hyper_L temporarily?
spare_mod="Hyper_L"
xmodmap -e "keycode 65 = $spare_mod"
xmodmap -e "remove mod4 = $spare_mod"
xmodmap -e "add mod3 = $spare_mod"
xmodmap -e "keycode any = space"
xcape_exprs+=( "$spare_mod=space" )

# Combine expressions array into semicolon-delimited string
printf -v xcape_expr_arg '%s;' "${xcape_exprs[@]}"
# Call xcape (and remove trailinig semicolon)
xcape  -t 350 -e "${xcape_expr_arg%;}"
