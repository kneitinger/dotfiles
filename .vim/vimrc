"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Plug Initialization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8
scriptencoding utf-8

" Install vimplug if not found
if has('nvim')
    if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    endif
else
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    endif
endif
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC

call plug#begin('~/.vim/bundle')
Plug 'airblade/vim-gitgutter'
Plug 'davidgranstrom/scnvim', { 'do': {-> scnvim#install() } }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
if has('macunix')
    set rtp+=/usr/local/opt/fzf
endif
Plug 'lervag/vimtex'
Plug 'LnL7/vim-nix'
Plug 'majutsushi/tagbar'
Plug 'mattesgroeger/vim-bookmarks'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'leissa/vim-acme'
Plug 'sirtaj/vim-openscad'
let g:coc_global_extensions = ['coc-snippets', 'coc-rust-analyzer', 'coc-explorer', 'coc-python', 'coc-sh', 'coc-vimlsp']
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basic Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !has('nvim')
    set t_Co=256        " 256 color mode
endif

" No bells
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

set autoread        " Automatically reload files upon change
set history=1000

" buffers need not be written before switching
" http://derekwyatt.org/2009/08/20/the-absolute-bare-minimum/
set hidden

" Open split and vsplit below and to the right, respectively
set splitbelow
set splitright

" Use the selection clipboard as the unnamed register to share yanks between
" multiple vim instances
set clipboard=unnamedplus

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Appearance
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

try
    colorscheme fairlyfloss
endtry

" Regenerate colorscheme file if it is written to
au! BufWrite */colorscheme_gen.erb !erubis -T - % > $HOME/.vim/colors/fairlyfloss.vim

" Ensure that highlight commands are run after colorscheme is loaded
" run :so ~/.vim/color_names.vim to find desired values
au! VimEnter  * hi Comment cterm=italic ctermfg=14
              \ | hi User1 ctermbg=14
              \ | hi Normal guibg=NONE ctermbg=NONE
              \ | hi LineNr ctermfg=12
              "\ | hi MatchParen  ctermfg=15 ctermbg=131

" Solves weird quirk of having a blank screen when spawned from joplin
" I guess?
au! BufEnter * highlight Normal guibg=0

set laststatus=2    " always show status bar

" status: [paste indicator][buffer num][filename][modified][readonly]
set statusline=%{HasPaste()}[%n][%<%F]%m%r%=
" status: spacer [filetype]['Col:'column]['Line:' n/N:percentage through file]
set statusline+=%y[Col:%c][Line:%l/%L:%p%%]

set number          " Show current line number.
set relativenumber  " All other line numbers are distance from current line
set cursorline      " Highlight current line
set lazyredraw      " Don't redraw screen until macro completes
set scrolloff=0     " Number of lines of context to pad when scrolling
set wildmenu        " Show bar of command autocompletes
set wildignore=*.o,*.out,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Habit Breaking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !empty($VIM_HARD_MODE)
    noremap hh <nop>
    noremap jj <nop>
    noremap kk <nop>
    noremap ll <nop>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:mapleader = '\'

" Copy/cut/paste to system clipboard
vnoremap <leader>c "+y
nnoremap <leader>c "+y$

inoremap <leader>v <ESC>"+pa
vnoremap <leader>v "+p
nnoremap <leader>v "+p

vnoremap <leader>x "+d
nnoremap <leader>x "+D

" Make motion on wrapped lines intuitive
noremap <silent> j gj
noremap <silent> k gk
" Save on 2 Escs
map <Esc><Esc> :w<CR>
" No Ex mode!!
noremap Q <Nop>
" Make Y behave like C/D, instead of yy
map Y y$
" Clear search highlights upon screen-clear
nnoremap <C-L> :nohl<CR><C-L>
" Reselect visual block selection after indent
vnoremap < <gv
vnoremap > >gv

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Toggle paste mode on and off
set pastetoggle=
map <leader>pp :setlocal paste!<cr>


" * or # search for selection in visual mode
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" Edit .vimrc
nmap <silent> <leader>ev :e $MYVIMRC<cr>
" Source .vimrc
nmap <silent> <leader>sv :so $MYVIMRC<cr>:doau VimEnter<cr>

" Spell check on/off
nmap <silent> <leader>sp :setlocal spell!<CR>
" Spell check jump
map <leader>sn ]s
map <leader>sp [s
" Spell check add
map <leader>sa zg
" Spell check suggestions
map <leader>s? z=

set mouse=a         " Enable the use of the mouse.

" Remove trailing whitespace
" http://vim.wikia.com/wiki/Remove_unwanted_spaces
nmap <leader>w :cal StripTrailingWhitespace()<CR>

" Echo the colorscheme element of the current text
nmap <leader>ccc :call <SID>SynStack()<CR>

" Search Options
set hlsearch        " Highlight all search matches
set incsearch       " Match as search pattern is being typed
set ignorecase      " Ignore case in search patterns ...
set smartcase       " ...unless the search term has an upper case character



" Tabs, spaces and backspaces
" set backspace=2     " Influences the working of <BS>, <Del>, CTRL-W
                    " and CTRL-U in Insert mode. This is a list of items,
                    " separated by commas. Each item allows a way to backspace
                    " over something.

set autoindent      " Copy indent from current line when starting a new line
set smartindent     " Make intuitive indent choices for some contexrs

set tabstop=4       " Number of spaces that a <Tab> in the file counts for.
set shiftwidth=4    " Number of spaces to use for each step of (auto)indent.
set expandtab       " Use the appropriate number of spaces to insert a <Tab>.
set smarttab        " Be smart about auto tabbing

set showmatch       " When a bracket is inserted, show the matching one
set matchtime=2     " Tenths of a second to show the match

"set textwidth=79    " Line auto-break column threshold

"set formatoptions=c,r,q,j

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetype-Specific Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup filetype_overrides
    au!
    " Force certain extensions to be recognized
    au BufRead,BufNewFile *.fst,*.dsp,*.lib set filetype=faust
    au BufRead,BufNewFile *.asm set filetype=acme

    " 2 Space Indentation
    au FileType
        \ html,javascript,json,nix,openscad,php,sh,tex,vim,yaml,zsh
        \ setlocal shiftwidth=2 tabstop=2
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Miscellaneous Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" W allows writing a file that you forgot to sudo vim on
"   - existence check lets you :source vimrc without error
if !exists('sudowrite')
    command W w !sudo tee % > /dev/null
    let g:sudowrite=1
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Backup/Swap/Persistence Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    set undodir=~/.vim/cache/undo//
    set undofile
catch
endtry

try
    set backupdir=~/.vim/cache/backup//
    set backup
catch
endtry

try
    set directory=~/.vim/cache/swap//
    set swapfile
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Function definitions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
        retab
    endif
endfunction

" For use in status line
function! HasPaste()
    if &paste
        return '[PASTE]'
    endif
    return ''
endfunction

" Load freebsd style functions, mapped to <leader>f
source $HOME/.vim/scripts/freebsd.vim

" Echo the colorscheme element of the current text
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Terminal Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')
    au TermOpen * set nonumber norelativenumber
endif
tnoremap <C-\> <C-\><C-n>
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l
inoremap <A-h> <C-\><C-N><C-w>h
inoremap <A-j> <C-\><C-N><C-w>j
inoremap <A-k> <C-\><C-N><C-w>k
inoremap <A-l> <C-\><C-N><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if !empty(glob($HOME.'/.vim/.venv'))
    let g:python3_host_prog = $HOME.'/.vim/.venv/bin/python3'
endif

" vimtex
let g:vimtex_view_method='zathura'
let g:vimtex_compiler_latexmk = {'build_dir' : './build'}
let g:tex_flavor = "latex"

" fzf
nnoremap <leader>f :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>r :Rg<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>m :Marks<CR>
nnoremap <leader>wt :call fzf#vim#tags(expand('<cword>'))<CR>

" Redefine Rg command with {'options': '--delimiter : --nth 4..'} to omit
" filename matches
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)

" ALE
au BufRead,BufNewFile ~/.ipylogs/**.py ALEDisable

" vim-bookmarks
let g:bookmark_sign = '♥'
let g:bookmark_highlight_lines = 0

" scnvim
autocmd VimEnter *.scd SCNvimStart
let g:scnvim_postwin_orientation = 'h'
let g:scnvim_postwin_direction = 'right'
let g:scnvim_postwin_size = 10
let g:scnvim_postwin_auto_toggle = 1
let g:scnvim_eval_flash_duration = 300
let g:scnvim_eval_flash_repeats = 2
let g:scnvim_scdoc = 1

" coc.nvim
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

if has("patch-8.1.1564")
" Recently vim" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved. can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

inoremap <silent><expr> <TAB>
  \ coc#pum#visible() ? coc#_select_confirm() :
  \ coc#expandableOrJumpable() ?
  \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
  \ CheckBackSpace() ? "\<TAB>" :
  \ coc#refresh()
function! CheckBackSpace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
let g:coc_snippet_next = '<tab>'

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" coc-snippets
set runtimepath+=~/.vim/vim-snippets,~/.vim/UltiSnips

" coc-explorer
noremap <space>e :CocCommand explorer --no-toggle<CR>
noremap <space>E :CocCommand explorer<CR>

" tagbar
nmap <leader>tb :TagbarToggle<CR>
